# Nginx configuration for FastVideo load balancing
# This configuration implements the architecture:
# ngrok -> nginx reverse proxy -> frontend1/frontend2 -> backend1×8/backend2×8

events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;  # Allow large video uploads

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Upstream for frontend load balancing
    upstream frontend_servers {
        # Round-robin load balancing between frontends
        server 127.0.0.1:7860 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:7861 weight=1 max_fails=3 fail_timeout=30s;
        
        # Health check
        keepalive 32;
    }

    # Upstream for backend1 load balancing (8 replicas)
    upstream backend1_servers {
        # Round-robin load balancing for backend1 replicas
        server 127.0.0.1:8000 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8001 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8002 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8003 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8004 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8005 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8006 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8007 weight=1 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }

    # Upstream for backend2 load balancing (8 replicas)
    upstream backend2_servers {
        # Round-robin load balancing for backend2 replicas
        server 127.0.0.1:8010 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8011 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8012 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8013 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8014 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8015 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8016 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8017 weight=1 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        # Frontend routes (Gradio interfaces)
        location / {
            proxy_pass http://frontend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for Gradio
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Backend API routes for frontend1
        location /api/frontend1/ {
            # Strip the /api/frontend1/ prefix
            rewrite ^/api/frontend1/(.*) /$1 break;
            proxy_pass http://backend1_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts for video generation
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Buffer settings for large responses
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Backend API routes for frontend2
        location /api/frontend2/ {
            # Strip the /api/frontend2/ prefix
            rewrite ^/api/frontend2/(.*) /$1 break;
            proxy_pass http://backend2_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts for video generation
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Buffer settings for large responses
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Static files (if needed)
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
}